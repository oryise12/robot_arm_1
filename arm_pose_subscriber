import rclpy
from rclpy.node import Node
import math

# Publisher와 동일한 메시지 타입을 import 합니다.
from arm_pose_msgs.msg import ArmHandState

class StateSubscriber(Node):
    def __init__(self):
        super().__init__('state_subscriber')
        
        # Subscriber 생성
        # 토픽 이름('arm_hand_state')과 메시지 타입(ArmHandState)이 Publisher와 정확히 일치해야 합니다.
        self.subscription = self.create_subscription(
            ArmHandState,
            'arm_hand_state',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning

        self.get_logger().info('State Subscriber 노드가 시작되었습니다. 메시지를 기다립니다...')

    def listener_callback(self, msg):
        """
        메시지를 수신했을 때마다 호출되는 콜백 함수
        """
        # --- 수신된 각도 정보를 보기 쉽게 변환 (라디안 -> 도) ---
        elbow_deg = math.degrees(msg.elbow_flexion)
        wrist_flex_deg = math.degrees(msg.wrist_flexion)
        wrist_rot_deg = math.degrees(msg.wrist_rotation)
        
        thumb_flex_deg = math.degrees(msg.thumb_flexion)
        thumb_abd_deg = math.degrees(msg.thumb_abduction)
        
        # 배열로 된 손가락 각도 정보 변환
        fingers_deg = [math.degrees(angle) for angle in msg.fingers_flexion]

        # --- 로거를 이용해 터미널에 출력 ---
        self.get_logger().info('\n' + '-'*30 +
            f'\n[Arm and Hand State Received]' +
            f'\n  Elbow Flexion : {elbow_deg:.2f}°' +
            f'\n  Wrist Flexion : {wrist_flex_deg:.2f}°' +
            f'\n  Wrist Rotation: {wrist_rot_deg:.2f}°' +
            f'\n' +
            f'\n  Thumb Flexion   : {thumb_flex_deg:.2f}°' +
            f'\n  Thumb Abduction : {thumb_abd_deg:.2f}°' +
            f'\n' +
            f'\n  Fingers Flexion (I, M, R, P):' +
            f'\n    Index : {fingers_deg[0]:.2f}°' +
            f'\n    Middle: {fingers_deg[1]:.2f}°' +
            f'\n    Ring  : {fingers_deg[2]:.2f}°' +
            f'\n    Pinky : {fingers_deg[3]:.2f}°' +
            '\n' + '-'*30
        )


def main(args=None):
    rclpy.init(args=args)
    state_subscriber = StateSubscriber()
    
    try:
        rclpy.spin(state_subscriber)
    except KeyboardInterrupt:
        pass
    finally:
        state_subscriber.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
